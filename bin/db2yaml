#!/usr/bin/env python3
import argparse
import logging
import os
import sys

import ruamel.yaml as yaml
import sqlalchemy

import schemasnap.db2yaml
import schemasnap.log


logger = logging.getLogger('bin.db2yaml')
schemasnap.log.init()


p = argparse.ArgumentParser()
p.add_argument('--config', '-c', default=os.path.expanduser('~/.schemasnap-config.yaml'),
               help='Path to config file containing server connection info')
p.add_argument('--update-only', '-u', action='store_true', default=False,
               help='Do not create new tables nor add columns to existing ones')
p.add_argument('--schema', default=None)  # Use dialect's default
p.add_argument('server',
               help='Server name from config file, or a fully-specified SQLAlchemy engine connection string')
p.add_argument('dest',
               help='Destination directory for YAML files')
opts = p.parse_args()


try:
    db_url = sqlalchemy.engine.url.make_url(opts.server)
    logger.info('Using server URL specified on the command line.')
except sqlalchemy.exc.ArgumentError:
    if not os.path.exists(opts.config):
        logger.error('Config file does not exist: %s', opts.config)
        sys.exit(1)

    logger.info('Using config file: %s', opts.config)
    config = yaml.safe_load(open(opts.config).read())
    server_config = config.get('servers', {}).get(opts.server)

    if not server_config:
        logger.error('Config file %s does not contain a server named "%s". '
                     'Check that the server is spelled correctly and the config file '
                     'is setup correctly. See readme for example if needed.',
                     opts.config, opts.server)
        sys.exit(1)
    db_url = sqlalchemy.engine.url.make_url(server_config['url'])

msg = ' (update only, no new tables or columns will be made)' if opts.update_only else ''
logger.info('Reflecting from %s:%s/%s into %s%s', db_url.host, db_url.port, db_url.database, opts.dest, msg)

engine = sqlalchemy.create_engine(db_url)
inspector = sqlalchemy.inspect(engine)
schemasnap.db2yaml.sync_schema_to_disk(inspector, opts.schema, opts.dest, opts.update_only)
